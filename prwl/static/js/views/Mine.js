// Generated by CoffeeScript 1.9.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  prwl.views.Mine = (function(superClass) {
    extend(Mine, superClass);

    function Mine() {
      return Mine.__super__.constructor.apply(this, arguments);
    }

    Mine.prototype.events = {
      "click #pin-button": "dropPin"
    };

    Mine.prototype.template = _.template($('#mine-template').html());

    Mine.prototype.initialize = function(arg) {
      var collection;
      collection = arg.collection;
      this.collection = collection;
      return this.collection.on('add remove change reset', this._updatePins, this);
    };

    Mine.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    Mine.prototype._updatePins = function(pin) {
      var pinsDiv;
      pinsDiv = this.$el.find('#mine-pins-anchor');
      pinsDiv.empty();
      return this.collection.each((function(_this) {
        return function(pin) {
          var pinView;
          pinView = new prwl.views.Pin(pin);
          return pinsDiv.append(pinView.render().$el);
        };
      })(this));
    };

    Mine.prototype.dropPin = function() {
      var fail, loader, pinButton, succ;
      pinButton = $('#pin-button');
      loader = $('<img>', {
        src: 'img/loader.gif',
        "class": 'right',
        width: '128'
      });
      pinButton.after(loader);
      if (navigator.geolocation != null) {
        succ = (function(_this) {
          return function(loc) {
            var pin;
            pin = new prwl.models.Pin({
              lat: loc.coords.latitude,
              lng: loc.coords.longitude,
              time: loc.timestamp
            });
            pin.save();
            _this.collection.add(pin);
            return loader.remove();
          };
        })(this);
        fail = function(e) {
          console.log(e.message);
          return loader.remove();
        };
        return navigator.geolocation.getCurrentPosition(succ, fail);
      } else {
        alert('Please enable navigation to allow prwl to work correctly!');
        return window.location.reload();
      }
    };

    return Mine;

  })(Backbone.View);

}).call(this);
