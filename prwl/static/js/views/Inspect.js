// Generated by CoffeeScript 1.9.1
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  prwl.views.Inspect = (function(superClass) {
    extend(Inspect, superClass);

    function Inspect() {
      return Inspect.__super__.constructor.apply(this, arguments);
    }

    Inspect.prototype.events = {
      "click #inspected-pin-submit": "submit",
      "keydown #comment-text": "checkCodes"
    };

    Inspect.prototype.template = _.template($('#inspect-template').html());

    Inspect.prototype.checkCodes = function(e) {
      var NEWLINE;
      NEWLINE = 13;
      if (e.which === NEWLINE) {
        return this.addComment();
      }
    };

    Inspect.prototype.initialize = function(arg) {
      var collection, pin;
      collection = arg.collection, pin = arg.pin;
      this.collection = collection;
      this.pin = pin;
      return this.pin.on('add remove change reset', this.render, this);
    };

    Inspect.prototype.render = function() {
      var pos;
      this.$el.html(this.template({
        pin: this.pin
      }));
      pos = new google.maps.LatLng(this.pin.get('lat'), this.pin.get('lng'));
      prwl.map.setCenter(pos);
      prwl.map.setZoom(11);
      return this;
    };

    Inspect.prototype.submit = function() {
      var desc, form, tagStr;
      form = $('#inspect-pin-form');
      desc = form.find("[name=desc]").val();
      tagStr = form.find("[name=tags]").val();
      if (desc) {
        this.pin.set({
          desc: desc
        });
      }
      if (tagStr) {
        this.pin.set({
          tags: this._parseTags(tagStr)
        });
      }
      this.pin.save();
      return prwl.events.trigger('goto-mine');
    };

    Inspect.prototype.addComment = function() {
      var comment;
      comment = $('#comment-text').val().trim();
      if (!comment) {
        return;
      }
      this.pin.get('comments').push(comment);
      this.pin.save();
      return this.pin.trigger('change');
    };

    Inspect.prototype._parseTags = function(tagStr) {
      if (tagStr != null) {
        return _.map(tagStr.split(','), function(tag) {
          return tag.trim();
        });
      } else {
        return [];
      }
    };

    return Inspect;

  })(Backbone.View);

}).call(this);
