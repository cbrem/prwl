// Generated by CoffeeScript 1.9.1
(function() {
  var fmtTime,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fmtTime = function(time) {
    return time;
  };

  prowl.views.Home = (function(superClass) {
    extend(Home, superClass);

    function Home() {
      return Home.__super__.constructor.apply(this, arguments);
    }

    Home.prototype.events = {
      'click #mine-button': '_gotoMine',
      'click #search-button': '_gotoSearch'
    };

    Home.prototype.initialize = function() {
      this.collection = new prowl.collections.Pins();
      this.collection.on('add remove change reset', this._updateMap, this);
      this.collection.fetch();
      this.map = null;
      this.view = null;
      this._viewCache = {};
      prowl.events.on('goto-inspect', this._gotoInspect, this);
      prowl.events.on('goto-mine', this._gotoMine, this);
      return this;
    };

    Home.prototype._gotoMine = function() {
      return this._renderSidebar('Mine', {}, true);
    };

    Home.prototype._gotoSearch = function() {
      return this._renderSidebar('Search', {}, true);
    };

    Home.prototype._gotoInspect = function(id) {
      var pin;
      pin = this.collection.get(id);
      return this._renderSidebar('Inspect', {
        pin: pin
      }, false);
    };

    Home.prototype._renderSidebar = function(name, args, cache) {
      var sidebarDiv;
      sidebarDiv = this.$el.find('#sidebar-anchor');
      args = _.extend({
        collection: this.collection
      }, args);
      return this._cachedRender(name, sidebarDiv, args, cache);
    };

    Home.prototype._cachedRender = function(name, $el, args, cache) {
      if (this.view != null) {
        this.view.$el.detach();
      }
      if (_.has(this._viewCache, name) && cache) {
        this.view = this._viewCache[name];
      } else {
        this.view = new prowl.views[name](args);
        this.view.render();
        this._viewCache[name] = this.view;
      }
      return $el.append(this.view.$el);
    };

    Home.prototype._updateMap = function() {
      if (this.map != null) {
        return this.collection.each((function(_this) {
          return function(pin) {
            var marker, position, title;
            position = new google.maps.LatLng(pin.get('lat'), pin.get('lng'));
            title = '#{ fmtTime(pin.get("time")) }: #{ pin.get("desc") }';
            marker = new google.maps.Marker({
              position: position,
              map: _this.map,
              title: title
            });
            return google.maps.event.addListener(marker, 'click', function() {
              return alert(title);
            });
          };
        })(this));
      }
    };

    Home.prototype.render = function() {
      var fail, mapDiv, opt, succ, template;
      template = $('#home-template').html();
      this.$el.html(_.template(template));
      this._gotoMine();
      opt = {
        zoom: 11
      };
      mapDiv = this.$el.find('#map-anchor')[0];
      prowl.map = this.map = new google.maps.Map(mapDiv, opt);
      this._updateMap();
      if (navigator.geolocation != null) {
        succ = (function(_this) {
          return function(loc) {
            var pos;
            pos = new google.maps.LatLng(loc.coords.latitude, loc.coords.longitude);
            return _this.map.setCenter(pos);
          };
        })(this);
        fail = function(e) {
          return console.log(e.message);
        };
        navigator.geolocation.getCurrentPosition(succ, fail);
      } else {
        alert('Please enable navigation to allow Prowl to work correctly!');
        window.location.reload();
      }
      return this;
    };

    return Home;

  })(Backbone.View);

}).call(this);
